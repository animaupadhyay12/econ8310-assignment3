# -*- coding: utf-8 -*-
"""assignment3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18aUWx6dUZurF95lClsHwRVMiQBa1jIa5
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader
import numpy as np
import requests, gzip, io
class FashionMNISTIDX(Dataset):
    def __init__(self, image_url, label_url, transform=None):
        label_data = requests.get(label_url).content
        image_data = requests.get(image_url).content

        with gzip.open(io.BytesIO(label_data), 'rb') as lb:
            self.labels = np.frombuffer(lb.read(), dtype=np.uint8, offset=8)

        with gzip.open(io.BytesIO(image_data), 'rb') as img:
            self.images = np.frombuffer(img.read(), dtype=np.uint8, offset=16).reshape(len(self.labels), 28, 28)

        self.transform = transform

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        image = torch.tensor(self.images[idx], dtype=torch.float32) / 255.0  # normalize
        label = self.labels[idx]
        if self.transform:
            image = self.transform(image)
        return image, label
class AdvancedFashionNet(nn.Module):
    def __init__(self):
        super(AdvancedFashionNet, self).__init__()
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(28*28, 256)
        self.fc2 = nn.Linear(256, 128)
        self.fc3 = nn.Linear(128, 64)
        self.out = nn.Linear(64, 10)
        self.dropout = nn.Dropout(0.25)

    def forward(self, x):
        x = self.flatten(x)
        x = F.relu(self.fc1(x))
        x = self.dropout(x)
        x = F.relu(self.fc2(x))
        x = self.dropout(x)
        x = F.relu(self.fc3(x))
        x = self.out(x)
        return F.log_softmax(x, dim=1)
train = FashionMNISTIDX(
    'https://github.com/zalandoresearch/fashion-mnist/raw/master/data/fashion/train-images-idx3-ubyte.gz',
    'https://github.com/zalandoresearch/fashion-mnist/raw/master/data/fashion/train-labels-idx1-ubyte.gz')
test = FashionMNISTIDX(
    'https://github.com/zalandoresearch/fashion-mnist/raw/master/data/fashion/t10k-images-idx3-ubyte.gz',
    'https://github.com/zalandoresearch/fashion-mnist/raw/master/data/fashion/t10k-labels-idx1-ubyte.gz')

train_loader = DataLoader(train, batch_size=64, shuffle=True)
test_loader = DataLoader(test, batch_size=64, shuffle=False)
model = AdvancedFashionNet()
loss_fn = nn.NLLLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
epochs = 10

def train_loop(dataloader, model, loss_fn, optimizer):
    model.train()
    for batch, (X, y) in enumerate(dataloader):
        X, y = X.float(), y
        pred = model(X)
        loss = loss_fn(pred, y)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        if batch % 100 == 0:
            print(f"Loss: {loss.item():>7f}  [{batch * len(X):>5d}/{len(dataloader.dataset):>5d}]")
def test_loop(dataloader, model, loss_fn):
    model.eval()
    test_loss, correct = 0, 0
    with torch.no_grad():
        for X, y in dataloader:
            X, y = X.float(), y
            pred = model(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).sum().item()
    test_loss /= len(dataloader)
    accuracy = 100 * correct / len(dataloader.dataset)
    print(f"Test Accuracy: {accuracy:.2f}%, Avg Loss: {test_loss:.4f}")
    return accuracy
for epoch in range(epochs):
    print(f"\nEpoch {epoch+1}")
    train_loop(train_loader, model, loss_fn, optimizer)
    test_loop(test_loader, model, loss_fn)
torch.save({
    'epoch': epochs,
    'model_state_dict': model.state_dict(),
    'optimizer_state_dict': optimizer.state_dict()
}, "model.pt")

print("\n Model saved as model.pt")
print("\nðŸ“¦ Loading model from disk and evaluating again...")
loaded_model = AdvancedFashionNet()
loaded_optimizer = torch.optim.Adam(loaded_model.parameters(), lr=0.001)

checkpoint = torch.load("model.pt", map_location=torch.device("cpu"))
loaded_model.load_state_dict(checkpoint['model_state_dict'])
loaded_optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
loaded_model.eval()
test_loop(test_loader, loaded_model, loss_fn)